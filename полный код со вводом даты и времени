import re
import asyncio
import logging
from datetime import datetime, timedelta, date
import calendar
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database import init_db, add_note, get_user_notes, delete_note, get_notes_for_reminders, mark_reminder_sent, \
    get_note_by_id
from config import BOT_TOKEN, DATABASE_NAME

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
class AddNoteStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_hour = State()
    waiting_for_minute = State()
    waiting_for_date = State()


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
def generate_calendar(year=None, month=None):
    now = datetime.now()
    if year is None:
        year = now.year
    if month is None:
        month = now.month

    kb = InlineKeyboardBuilder()

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    kb.row(
        InlineKeyboardButton(text="‚óÄ", callback_data=f"prev_month_{year}_{month}"),
        InlineKeyboardButton(text=f"{calendar.month_name[month]} {year}", callback_data="ignore"),
        InlineKeyboardButton(text="‚ñ∂", callback_data=f"next_month_{year}_{month}")
    )

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    kb.row(*[InlineKeyboardButton(text=day, callback_data="ignore") for day in week_days])

    # –î–Ω–∏ –º–µ—Å—è—Ü–∞
    month_days = calendar.monthcalendar(year, month)
    today = now.date()

    for week in month_days:
        row = []
        for day in week:
            if day == 0:
                row.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
            else:
                day_date = date(year, month, day)
                if day_date < today:
                    row.append(InlineKeyboardButton(text="‚úñ", callback_data="ignore"))
                else:
                    row.append(InlineKeyboardButton(
                        text=str(day),
                        callback_data=f"select_day_{year}_{month}_{day}"
                    ))
        kb.row(*row)

    # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞
    kb.row(
        InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data=f"today_{year}_{month}"),
        InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data=f"tomorrow_{year}_{month}")
    )

    return kb.as_markup()


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —á–∞—Å–æ–≤
def generate_hours_keyboard():
    kb = InlineKeyboardBuilder()

    # –ß–∞—Å—ã (0-23)
    for hour in range(0, 24, 6):
        row = []
        for h in range(hour, hour + 6):
            row.append(InlineKeyboardButton(
                text=f"{h:02d}",
                callback_data=f"select_hour_{h}"
            ))
        kb.row(*row)

    return kb.as_markup()


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–∏–Ω—É—Ç
def generate_minutes_keyboard():
    kb = InlineKeyboardBuilder()

    # –ú–∏–Ω—É—Ç—ã (—Å —à–∞–≥–æ–º 5 –º–∏–Ω—É—Ç)
    for minute in range(0, 60, 15):
        row = []
        for m in range(minute, minute + 15, 5):
            row.append(InlineKeyboardButton(
                text=f"{m:02d}",
                callback_data=f"select_minute_{m}"
            ))
        kb.row(*row)

    return kb.as_markup()


"""—Ö–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥"""


@router.message(CommandStart())
async def command_start_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∞–º–∏"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data="add_note")],
        [InlineKeyboardButton(text="–ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏", callback_data="list_notes")],
        [InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="show_help")]
    ])

    await message.answer(
        "–ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∞–º–∏ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )


@router.callback_query(F.data == "show_help")
async def show_help_handler(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    await callback.message.edit_text(
        "–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º:\n\n"
        "1. –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –Ω–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É'\n"
        "2. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –Ω–∞–∂–º–∏—Ç–µ '–ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏'\n"
        "3. –£–¥–∞–ª—è—Ç—å –∑–∞–º–µ—Ç–∫–∏ –º–æ–∂–Ω–æ –ø—Ä—è–º–æ –∏–∑ —Å–ø–∏—Å–∫–∞\n\n"
        "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç –æ –∑–∞–º–µ—Ç–∫–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è!",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_main")
async def back_to_main_handler(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", callback_data="add_note")],
        [InlineKeyboardButton(text="–ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏", callback_data="list_notes")],
        [InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="show_help")]
    ])
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "add_note")
async def add_note_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏"""
    await state.set_state(AddNoteStates.waiting_for_text)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="back_to_main")]
        ])
    )
    await callback.answer()


@router.message(AddNoteStates.waiting_for_text)
async def process_note_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —á–∞—Å—ã"""
    await state.update_data(note_text=message.text)
    await state.set_state(AddNoteStates.waiting_for_hour)
    await message.answer(
        "üïí –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å:",
        reply_markup=generate_hours_keyboard()
    )


@router.callback_query(F.data.startswith("select_hour_"), AddNoteStates.waiting_for_hour)
async def process_hour_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —á–∞—Å–∞"""
    hour = int(callback.data.split("_")[2])
    await state.update_data(selected_hour=hour)
    await state.set_state(AddNoteStates.waiting_for_minute)
    await callback.message.edit_text(
        "üïí –í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã:",
        reply_markup=generate_minutes_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("select_minute_"), AddNoteStates.waiting_for_minute)
async def process_minute_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–∏–Ω—É—Ç"""
    minute = int(callback.data.split("_")[2])
    await state.update_data(selected_minute=minute)
    await state.set_state(AddNoteStates.waiting_for_date)
    await callback.message.edit_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=generate_calendar()
    )
    await callback.answer()


@router.callback_query(F.data.startswith(("prev_month_", "next_month_", "select_day_", "today_", "tomorrow_")),
                       AddNoteStates.waiting_for_date)
async def process_calendar_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    data = callback.data.split("_")

    if data[0] == "select":
        # –í—ã–±—Ä–∞–Ω –¥–µ–Ω—å
        year, month, day = int(data[2]), int(data[3]), int(data[4])
        selected_date = date(year, month, day)
        user_data = await state.get_data()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ –ë–î
        await add_note(
            DATABASE_NAME,
            callback.from_user.id,
            user_data["note_text"],
            selected_date.strftime("%Y-%m-%d"),
            f"{user_data['selected_hour']:02d}:{user_data['selected_minute']:02d}"
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏", callback_data="list_notes")],
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_note")],
            [InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])

        await callback.message.edit_text(
            f"–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n<b>{selected_date.strftime('%Y-%m-%d')} {user_data['selected_hour']:02d}:{user_data['selected_minute']:02d}</b>\n{user_data['note_text']}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await state.clear()
    elif data[0] in ["today", "tomorrow"]:
        # –°–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞
        if data[0] == "today":
            selected_date = datetime.now().date()
        else:
            selected_date = datetime.now().date() + timedelta(days=1)

        user_data = await state.get_data()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ –ë–î
        await add_note(
            DATABASE_NAME,
            callback.from_user.id,
            user_data["note_text"],
            selected_date.strftime("%Y-%m-%d"),
            f"{user_data['selected_hour']:02d}:{user_data['selected_minute']:02d}"
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏", callback_data="list_notes")],
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_note")],
            [InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])

        await callback.message.edit_text(
            f"–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n<b>{selected_date.strftime('%Y-%m-%d')} {user_data['selected_hour']:02d}:{user_data['selected_minute']:02d}</b>\n{user_data['note_text']}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await state.clear()
    elif data[0] == "prev":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ—Å—è—Ü—É
        year, month = int(data[2]), int(data[3])
        month -= 1
        if month < 1:
            month = 12
            year -= 1
        await callback.message.edit_reply_markup(reply_markup=generate_calendar(year, month))
    elif data[0] == "next":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Å—è—Ü—É
        year, month = int(data[2]), int(data[3])
        month += 1
        if month > 12:
            month = 1
            year += 1
        await callback.message.edit_reply_markup(reply_markup=generate_calendar(year, month))

    await callback.answer()


# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã (list_notes, delete_note, view_note –∏ —Ç.–¥.) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
# ...

"""–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""


async def check_reminders(bot: Bot):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    while True:
        logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
        now = datetime.now()
        notes_to_check = await get_notes_for_reminders(DATABASE_NAME)

        for note in notes_to_check:
            note_id = note['id']
            user_id = note['user_id']
            note_text = note['note_text']
            note_date_str = note['note_date']
            note_time_str = note['note_time']

            try:
                note_datetime = datetime.strptime(f"{note_date_str} {note_time_str}", "%Y-%m-%d %H:%M")
            except ValueError:
                logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ ID {note_id}: {note_date_str} {note_time_str}")
                continue

            time_diff = note_datetime - now

            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞
            if not note['reminder_24h_sent'] and time_diff <= timedelta(days=1) and time_diff > timedelta(hours=1):
                try:
                    await bot.send_message(
                        user_id,
                        f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (24 —á–∞—Å–∞): \"{note_text}\" –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {note_date_str} {note_time_str}"
                    )
                    await mark_reminder_sent(DATABASE_NAME, note_id, '24h')
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ 24h –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 —á–∞—Å
            elif not note['reminder_1h_sent'] and time_diff <= timedelta(hours=1) and time_diff > timedelta(minutes=0):
                try:
                    await bot.send_message(
                        user_id,
                        f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (1 —á–∞—Å): \"{note_text}\" –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {note_date_str} {note_time_str}"
                    )
                    await mark_reminder_sent(DATABASE_NAME, note_id, '1h')
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ 1h –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

        await asyncio.sleep(60)


"""–æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞"""


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏."""
    await init_db(DATABASE_NAME)
    asyncio.create_task(check_reminders(bot))
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        logging.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
