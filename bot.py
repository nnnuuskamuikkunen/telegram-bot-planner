import asyncio
import logging
from datetime import datetime, timedelta
import re

from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from database import init_db, add_note, get_user_notes, delete_note, get_notes_for_reminders, mark_reminder_sent
from config import BOT_TOKEN, DATABASE_NAME # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ config.py

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router() # –ò—Å–ø–æ–ª—å–∑—É–µ–º Router –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
dp.include_router(router)

# --- –•—ç–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ ---

@router.message(CommandStart())
async def command_start_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–º–µ—Ç–æ–∫ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.\n\n"
        "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É, –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "```\n–ß–ß:–ú–ú, –ì–ì–ì–ì-–ú–ú-–î–î, –¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏\n```\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: `18:00, 2023-12-31, –ó–∞–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–π —Ç–æ—Ä—Ç`\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/notes - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–º–µ—Ç–∫–∏\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–Ω–æ–≤–∞"
    )

@router.message(Command("help"))
async def command_help_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await command_start_handler(message) # –ü—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /start

@router.message(Command("notes"))
async def command_notes_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /notes: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    notes = await get_user_notes(DATABASE_NAME, user_id)

    if not notes:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
        return

    response = "–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏:\n\n"
    keyboard_buttons = []
    for note in notes:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        response += f"#{note['id']}: {note['note_date']} {note['note_time']} - {note['note_text']}\n"
        keyboard_buttons.append(
            [InlineKeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å #{note['id']}", callback_data=f"delete_{note['id']}")]
        )

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    await message.answer(response, reply_markup=keyboard)


# --- –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ ---

# –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: –ß–ß:–ú–ú, –ì–ì–ì–ì-–ú–ú-–î–î, –¢–µ–∫—Å—Ç
NOTE_FORMAT_PATTERN = re.compile(r'^(\d{2}:\d{2}),\s*(\d{4}-\d{2}-\d{2}),\s*(.+)$')

@router.message() # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏
async def handle_note_input(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø–æ–ø—ã—Ç–∫—É –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É."""
    user_id = message.from_user.id
    text = message.text.strip()

    match = NOTE_FORMAT_PATTERN.match(text)

    if not match:
        # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        # –ú–æ–∂–Ω–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è "—Å–≤–æ–±–æ–¥–Ω–æ–≥–æ" —Ç–µ–∫—Å—Ç–∞,
        # –Ω–æ –ø–æ —É—Å–ª–æ–≤–∏—é –æ–∂–∏–¥–∞–µ—Ç—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –µ—Å–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –∑–∞–º–µ—Ç–∫–∏, –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º.
        # –ò–ª–∏ –º–æ–∂–Ω–æ —Å–æ–æ–±—â–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–º–µ—Ç–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ß–ß:–ú–ú, –ì–ì–ì–ì-–ú–ú-–î–î, –¢–µ–∫—Å—Ç")
        return

    time_str, date_str, note_text = match.groups()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        note_datetime = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
        if note_datetime < datetime.now() - timedelta(minutes=1): # –ù–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥
             await message.answer("–ù–µ –º–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –≤ –ø—Ä–æ—à–ª–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.")
             return

    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ß–ß:–ú–ú, –ì–ì–ì–ì-–ú–ú-–î–î")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await add_note(DATABASE_NAME, user_id, note_text, date_str, time_str)

    await message.answer(f"–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {date_str} {time_str} - \"{note_text}\"")


# --- –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ ---

@router.callback_query(F.data.startswith("delete_"))
async def callback_delete_note(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É"."""
    note_id_str = callback_query.data.split("_")[1]
    user_id = callback_query.from_user.id

    try:
        note_id = int(note_id_str)
    except ValueError:
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–º–µ—Ç–∫–∏.", show_alert=True)
        return

    deleted = await delete_note(DATABASE_NAME, note_id, user_id)

    if deleted:
        await callback_query.answer(f"–ó–∞–º–µ—Ç–∫–∞ #{note_id} —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–º–µ—Ç–æ–∫
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–∏–º –æ–∫–Ω–æ–º
        # –ú–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å command_notes_handler(callback_query.message)
        # –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è callback_query.message.edit_text(...)
    else:
        await callback_query.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–º–µ—Ç–∫–∏ #{note_id}. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", show_alert=True)

    await callback_query.message.edit_reply_markup(reply_markup=None) # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    await callback_query.answer() # –í–∞–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback Query


# --- –ó–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---

async def check_reminders(bot: Bot):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    while True:
        logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
        now = datetime.now()
        notes_to_check = await get_notes_for_reminders(DATABASE_NAME)

        for note in notes_to_check:
            note_id = note['id']
            user_id = note['user_id']
            note_text = note['note_text']
            note_date_str = note['note_date']
            note_time_str = note['note_time']

            try:
                note_datetime = datetime.strptime(f"{note_date_str} {note_time_str}", "%Y-%m-%d %H:%M")
            except ValueError:
                logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ ID {note_id}: {note_date_str} {note_time_str}")
                continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –∑–∞–º–µ—Ç–∫—É

            time_diff = note_datetime - now

            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞
            if not note['reminder_24h_sent'] and time_diff <= timedelta(days=1) and time_diff > timedelta(hours=1):
                try:
                    await bot.send_message(user_id, f"üïí –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (24 —á–∞—Å–∞): \"{note_text}\" –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {note_date_str} {note_time_str}")
                    await mark_reminder_sent(DATABASE_NAME, note_id, '24h')
                    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ 24h –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ ID {note_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ 24h –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ ID {note_id}: {e}")

            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 —á–∞—Å
            elif not note['reminder_1h_sent'] and time_diff <= timedelta(hours=1) and time_diff > timedelta(minutes=0):
                 try:
                    await bot.send_message(user_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (1 —á–∞—Å): \"{note_text}\" –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {note_date_str} {note_time_str}")
                    await mark_reminder_sent(DATABASE_NAME, note_id, '1h')
                    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ 1h –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ ID {note_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                 except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ 1h –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–º–µ—Ç–∫–∏ ID {note_id}: {e}")

            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É, –µ—Å–ª–∏ –µ—ë –≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ –∏ –æ–±–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
            # if note['reminder_24h_sent'] and note['reminder_1h_sent'] and note_datetime <= now:
            #     await delete_note(DATABASE_NAME, note_id, user_id)
            #     logging.info(f"–ó–∞–º–µ—Ç–∫–∞ ID {note_id} —É–¥–∞–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")


        await asyncio.sleep(60) # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
    await init_db(DATABASE_NAME)

    # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    asyncio.create_task(check_reminders(bot))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        logging.exception(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
