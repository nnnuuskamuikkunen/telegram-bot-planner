class AddNoteStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_hour = State()
    waiting_for_minute = State()
    waiting_for_date = State()

def generate_calendar(year=None, month=None):
    now = datetime.now()
    if year is None:
        year = now.year
    if month is None:
        month = now.month
    
    kb = InlineKeyboardBuilder()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    kb.row(
        InlineKeyboardButton(text="‚óÄ", callback_data=f"prev_month_{year}_{month}"),
        InlineKeyboardButton(text=f"{calendar.month_name[month]} {year}", callback_data="ignore"),
        InlineKeyboardButton(text="‚ñ∂", callback_data=f"next_month_{year}_{month}")
    )
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    kb.row(*[InlineKeyboardButton(text=day, callback_data="ignore") for day in week_days])
    
    # –î–Ω–∏ –º–µ—Å—è—Ü–∞
    month_days = calendar.monthcalendar(year, month)
    today = now.date()
    
    for week in month_days:
        row = []
        for day in week:
            if day == 0:
                row.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
            else:
                day_date = date(year, month, day)
                if day_date < today:
                    row.append(InlineKeyboardButton(text="‚úñ", callback_data="ignore"))
                else:
                    row.append(InlineKeyboardButton(
                        text=str(day),
                        callback_data=f"select_day_{year}_{month}_{day}"
                    ))
        kb.row(*row)
    
    # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞
    kb.row(
        InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data=f"today_{year}_{month}"),
        InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data=f"tomorrow_{year}_{month}")
    )
    
    return kb.as_markup()

def generate_hours_keyboard():
    kb = InlineKeyboardBuilder()
    
    # –ß–∞—Å—ã (0-23)
    for hour in range(0, 24, 6):
        row = []
        for h in range(hour, hour + 6):
            row.append(InlineKeyboardButton(
                text=f"{h:02d}",
                callback_data=f"select_hour_{h}"
            ))
        kb.row(*row)
    
    return kb.as_markup()

def generate_minutes_keyboard():
    kb = InlineKeyboardBuilder()
    
    # –ú–∏–Ω—É—Ç—ã (—Å —à–∞–≥–æ–º 5 –º–∏–Ω—É—Ç)
    for minute in range(0, 60, 15):
        row = []
        for m in range(minute, minute + 15, 5):
            row.append(InlineKeyboardButton(
                text=f"{m:02d}",
                callback_data=f"select_minute_{m}"
            ))
        kb.row(*row)
    
    return kb.as_markup()

@router.callback_query(F.data == "add_note")
async def add_note_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏"""
    await state.set_state(AddNoteStates.waiting_for_text)
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="back_to_main")]
        ])
    )
    await callback.answer()

@router.message(AddNoteStates.waiting_for_text)
async def process_note_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —á–∞—Å—ã"""
    await state.update_data(note_text=message.text)
    await state.set_state(AddNoteStates.waiting_for_hour)
    await message.answer(
        "üïí –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å:",
        reply_markup=generate_hours_keyboard()
    )

@router.callback_query(F.data.startswith("select_hour_"), AddNoteStates.waiting_for_hour)
async def process_hour_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —á–∞—Å–∞"""
    hour = int(callback.data.split("_")[2])
    await state.update_data(selected_hour=hour)
    await state.set_state(AddNoteStates.waiting_for_minute)
    await callback.message.edit_text(
        "üïí –í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω—É—Ç—ã:",
        reply_markup=generate_minutes_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("select_minute_"), AddNoteStates.waiting_for_minute)
async def process_minute_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–∏–Ω—É—Ç"""
    minute = int(callback.data.split("_")[2])
    await state.update_data(selected_minute=minute)
    await state.set_state(AddNoteStates.waiting_for_date)
    await callback.message.edit_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=generate_calendar()
    )
    await callback.answer()

@router.callback_query(F.data.startswith(("prev_month_", "next_month_", "select_day_", "today_", "tomorrow_")), AddNoteStates.waiting_for_date)
async def process_calendar_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    data = callback.data.split("_")
    
    if data[0] == "select":
        # –í—ã–±—Ä–∞–Ω –¥–µ–Ω—å
        year, month, day = int(data[2]), int(data[3]), int(data[4])
        selected_date = date(year, month, day)
        user_data = await state.get_data()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ –ë–î
        await add_note(
            DATABASE_NAME,
            callback.from_user.id,
            user_data["note_text"],
            selected_date.strftime("%Y-%m-%d"),
            f"{user_data['selected_hour']:02d}:{user_data['selected_minute']:02d}"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏", callback_data="list_notes")],
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_note")],
            [InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        
        await callback.message.edit_text(
            f"–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n<b>{selected_date.strftime('%Y-%m-%d')} {user_data['selected_hour']:02d}:{user_data['selected_minute']:02d}</b>\n{user_data['note_text']}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await state.clear()
    elif data[0] in ["today", "tomorrow"]:
        # –°–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞
        if data[0] == "today":
            selected_date = datetime.now().date()
        else:
            selected_date = datetime.now().date() + timedelta(days=1)
        
        user_data = await state.get_data()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–º–µ—Ç–∫—É –≤ –ë–î
        await add_note(
            DATABASE_NAME,
            callback.from_user.id,
            user_data["note_text"],
            selected_date.strftime("%Y-%m-%d"),
            f"{user_data['selected_hour']:02d}:{user_data['selected_minute']:02d}"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏", callback_data="list_notes")],
            [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_note")],
            [InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
        
        await callback.message.edit_text(
            f"–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n<b>{selected_date.strftime('%Y-%m-%d')} {user_data['selected_hour']:02d}:{user_data['selected_minute']:02d}</b>\n{user_data['note_text']}",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await state.clear()
    elif data[0] == "prev":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –º–µ—Å—è—Ü—É
        year, month = int(data[2]), int(data[3])
        month -= 1
        if month < 1:
            month = 12
            year -= 1
        await callback.message.edit_reply_markup(reply_markup=generate_calendar(year, month))
    elif data[0] == "next":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–µ—Å—è—Ü—É
        year, month = int(data[2]), int(data[3])
        month += 1
        if month > 12:
            month = 1
            year += 1
        await callback.message.edit_reply_markup(reply_markup=generate_calendar(year, month))
    
    await callback.answer()
